import telebot
from telebot import types
import sqlite3
import random
import time
import threading
from datetime import datetime

bot_token = '6815104243:AAHbI_dUY7vyjUfYPd1bcy6sJQ_4YSYCVqE'
bot = telebot.TeleBot(bot_token)
CHANNEL_ID = -1002093214840
admin_id = 1788067264
useer_id1 = 0


def rang1(message):
    connection = sqlite3.connect('lottery.sql')
    connection.isolation_level = None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isolation_level –≤ None
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT rang FROM users WHERE id=?", (message.chat.id,))
        result = cursor.fetchone()
        cursor.execute("SELECT tickets FROM users WHERE id=?", (message.chat.id,))
        tickets = cursor.fetchone()
        bot.send_message(message.chat.id, f"{tickets[0]}, {result[0]}")

        if result:
            if str(result[0]) == 'üíé–ê–ª–º–∞–∑':
                tickets = int(tickets[0]) + 20
                cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (int(tickets), message.chat.id))
                connection.commit()
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        cursor.close()
        connection.close()

def channel(message):
    member_info = bot.get_chat_member(CHANNEL_ID, message.from_user.id)
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()
    cursor.execute("SELECT subscribe FROM users WHERE id=?", (message.chat.id,))
    flag = cursor.fetchone()
    if member_info.status in ['member', 'administrator', 'creator']:
        try:
            bot.send_message(message.chat.id, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –±–∏–ª–µ—Ç–∞ ")
            cursor.execute("SELECT tickets FROM users WHERE id=?", (message.chat.id,))
            fetched_data = str(cursor.fetchone())

            if fetched_data.isdigit():
                tickets = int(fetched_data)
                connection.commit()

                if flag is None:
                    cursor.execute("UPDATE users SET subscribe = ? WHERE id = ?", (1, message.chat.id))
                    cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (tickets + 2, message.chat.id))
                    connection.commit()
                else:
                    pass
            else:
                print("Fetched data is not a valid number")

        except Exception as e:
            print(f"An error occurred: {e}")
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–æ–¥ –≤ –ª–æ–≥ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ tickets –≤ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            pass


def get_tickets(message):
    tickets = 0
    try:
        tickets += rang1(message)
    except TypeError:
        print("An error occurred while getting tickets.")
        # –ú–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å tickets –≤ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        pass

    return tickets


def rang(user_id1):
    useer_id1 = get_id()
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()
    cursor.execute("SELECT rang, tickets FROM users WHERE id=?", (user_id1,))
    result = cursor.fetchone()

    if result:
        rang1, tickets = result
        if rang1 == 'ü•à–°–µ—Ä–µ–±—Ä–æ':
            cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (tickets + 2, user_id1))
        elif rang1 == 'ü•á–ó–æ–ª–æ—Ç–æ':
            cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (tickets + 5, user_id1))
        elif rang1 == 'üèÜ–ü–ª–∞—Ç–∏–Ω–∞':
            cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (tickets + 10, user_id1))
        elif rang1 == 'üíé–ê–ª–º–∞–∑':
            cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (tickets + 20, user_id1))

        connection.commit()

    connection.close()


def get_user_name(user_id1):
    user_info = bot.get_chat(user_id1)
    return user_info.username

def get_id(message):
    user_id = message.chat.id
    return user_id

def background_task(user_id1, message):
    while True:
        channel(message)
        rang(user_id1)
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        if now.weekday() == 6 and current_time == '13:00:00':
            announce_winner()
        time.sleep(1)


def announce_winner():
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT id FROM users")
    all_user_ids = cursor.fetchall()

    if not all_user_ids:
        return  # –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    winner_id = random.choice(all_user_ids)[0]
    winner_username = get_user_name(winner_id)

    if winner_username:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, @{winner_username}! –í—ã - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ª–æ—Ç–µ—Ä–µ–∏! üèÜ"
        for user_id in all_user_ids:
            bot.send_message(user_id[0], winner_message)

    connection.close()

def get_all_users():
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()
    cursor.execute('SELECT id FROM users')
    users = cursor.fetchall()
    connection.close()
    return users

@bot.message_handler(commands=['start'])
def start(message):
    global useer_id1
    useer_id1 = message.chat.id
    if message.from_user.id == admin_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='status'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
    user_id = message.text.split(' ')[1] if len(message.text.split(' ')) > 1 else None
    member_info = bot.get_chat_member(CHANNEL_ID, message.from_user.id)
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER, tickets INTEGER, share INTEGER, rang TEXT, number_of_share INTEGER, subscribe INTEGER)''')
    if member_info.status in ['member', 'administrator', 'creator']:
        bot.send_message(message.chat.id, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –±–∏–ª–µ—Ç–∞ ")
        cursor.execute("SELECT tickets FROM users WHERE id=?", (message.chat.id,))
        current_rang = cursor.fetchone()
        if current_rang and current_rang[0] is not None:
            current_rang = int(current_rang[0]) + 2
        else:
            current_rang = 2
        cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (current_rang, message.chat.id))
        cursor.execute("INSERT OR REPLACE INTO users (id, rang) VALUES (?, ?)", (message.chat.id, str(current_rang)))
        cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (message.chat.id,))
    else:
        current_rang = 0
        cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (current_rang, message.chat.id))
    if user_id is not None:
        cursor.execute("UPDATE users SET share = ? WHERE id = ?", (user_id, message.chat.id))
    cursor.execute("SELECT rang FROM users WHERE id=?", (message.chat.id,))
    rang = cursor.fetchone()
    if rang and rang[0] is None:
        rang = '–ù–æ–≤–∏—á–æ–∫'
        cursor.execute("INSERT OR REPLACE INTO users (id, rang) VALUES (?, ?)", (message.chat.id, str(rang)))
    connection.commit()
    cursor.close()
    connection.close()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å üöÄ', callback_data='enter'))
    markup.add(types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã üéü', 'https://t.me/notcoin_bot?start=r_574619_1940988'))
    markup.add(types.InlineKeyboardButton('–ë–∏–ª–µ—Ç—ã –∑–∞ –∫–∞–Ω–∞–ª üé´', 'https://t.me/notcoin_army'))
    markup.add(types.InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data='share'))
    markup.add(types.InlineKeyboardButton('–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'https://t.me/CrazyForce_support_bot'))
    bot.send_message(message.chat.id, f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n\n–£—á–∞—Å—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ!\n\nü§î –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?  \n1. –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–æ—Ç–∫–æ–∏–Ω–µ: https://t.me/notcoin_bot?start=r_574619_1940988\n2. –ó–∞—Ç–µ–º, –Ω–∞–±–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å silver –∏ –∫—É–ø–∏—Ç—å tap bot (–æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π). \n3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ - –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–∞—à id (menu-id) –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ - "–ª–æ—Ç–µ—Ä–µ—è"\n\n–ú—ã –≤–∞–º –Ω–∞—á–∏—Å–ª–∏–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–µ–±—Ä–æ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 2 –±–∏–ª–µ—Ç–∞ üéü –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!\n\nüòå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É?–ó–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ notcoin - –º—ã –Ω–∞—á–∏—Å–ª—è–µ–º –±–∏–ª–µ—Ç—ã:\n\nü•à–°–µ—Ä–µ–±—Ä–æ - 2 –±–∏–ª–µ—Ç–∞ üéü\nü•á–ó–æ–ª–æ—Ç–æ - 5 –±–∏–ª–µ—Ç–æ–≤ üéü\nüèÜ–ü–ª–∞—Ç–∏–Ω–∞ - 10 –±–∏–ª–µ—Ç–æ–≤ üéü\nüíé–ê–ª–º–∞–∑ - 20 –±–∏–ª–µ—Ç–æ–≤ üéü\n\nüòâ –ù–æ –∏ —ç—Ç–æ –µ—â—ë –Ω–µ –≤—Å—ë!\n1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - –¥–∞–µ—Ç +2 –±–∏–ª–µ—Ç–∞ üéü\n2. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–µ–±—Ä–∞ –∏ –ø–æ–ª—É—á–∏ –µ—â—ë +2 –±–∏–ª–µ—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ! üéü\n\n–¢–≤–æ–π —Ä–∞–Ω–≥: {str(rang)[2:-3]}\n–¢–≤–æ–∏ –±–∏–ª–µ—Ç—ã: {str(current_rang)} üéü\n\n–ñ–ú–ò –£–ß–ê–°–¢–í–û–í–ê–¢–¨!', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('share'))
def share(call):
    count = 0
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()
    cursor.execute('SELECT share, rang FROM users')
    rows = cursor.fetchall()
    for row, rang in rows:
        if row == call.message.chat.id and rang == 'ü•à–°–µ—Ä–µ–±—Ä–æ':
            count += 1
    cursor.execute("SELECT tickets FROM users WHERE id=?", (call.message.chat.id,))
    current_rang = cursor.fetchone()
    current_rang = int(str(current_rang)[1:-2])
    current_rang = current_rang + (2 * count)
    cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (current_rang, call.message.chat.id))
    connection.commit()
    connection.close()
    bot.send_message(call.message.chat.id, f'–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n https://t.me/lotteryy1_bot?start={call.message.chat.id}\n –ö–æ–ª–∏—á–µ—Å–≤—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π —Å —Ä–∞–Ω–≥–æ–º "ü•à–°–µ—Ä–µ–±—Ä–æ":{count}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('status'))
def status(call):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('lottery.sql', check_same_thread=False)
    cursor = connection.cursor()

    text_id = ''
    text_status = ''
    markup = types.ForceReply(selective=False)

    # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
    def get_id_and_status(message):
        nonlocal text_id, text_status  # –ò—Å–ø–æ–ª—å–∑—É–µ–º nonlocal –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = message.text.split()
        text_id = text[0][:10]
        text_status = text[1][:255] if len(text) > 1 else ''
        bot.send_message(call.message.chat.id, f"ID: {text_id}, –°—Ç–∞—Ç—É—Å: {text_status}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        inner_connection = sqlite3.connect('lottery.sql', check_same_thread=False)
        inner_cursor = inner_connection.cursor()
        inner_cursor.execute("UPDATE users SET rang = ? WHERE id = ?", (str(text_status), text_id))
        inner_connection.commit()
        inner_connection.close()  # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(call.message, get_id_and_status)
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å—Ç–∞—Ç—É—Å (–Ω–µ –±–æ–ª–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤)',
                     reply_markup=markup)




@bot.callback_query_handler(func=lambda call: call.data.startswith('enter'))
def enter(call):
    connection = sqlite3.connect('lottery.sql')
    cursor = connection.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (call.message.chat.id,))
    cursor.execute("UPDATE users SET tickets = ? WHERE id = ?", (0, call.message.chat.id))
    connection.commit()
    bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
def background_task(user_id1):
    while True:
        channel(user_id1)
        rang(user_id1)
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        if now.weekday() == 6 and current_time == '13:00:00':
            announce_winner()
        time.sleep(1)

if __name__ == "__main__":
    useer_id1 = 123456789  # Replace with the actual user_id1
    # Start the background task in a separate thread
    background_thread = threading.Thread(target=lambda: background_task(message))
    background_thread.start()

    # You may want to add the rest of your bot initialization here (e.g., bot.infinity_polling())
    bot.infinity_polling()
